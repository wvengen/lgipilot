# Ganga configuration file ($Name: Ganga-5-5-23 $). DO NOT remove this line.
# Also LGI Pilot job manager configuration file.
#
# Note that many more options than displayed here are available, look
# at Ganga and its documentation.


#=======================================================================
#  LGI Pilot job manager configuration section
[LGI]
#  Pilot job resource daemon tarball, fully configured for your applications
#  and project server.
#PilotDist = pilotdist/pilotjob.tar.gz
#  Script to run inside pilotjob, which unpacks the tarball and executes the
#  resource daemon.
#PilotScript = pilotdist/pilotrun.sh
#  LGI Poll time in seconds
#Poll = 30
#  Pilotjob update sleep time
#Update = 10

#  Minimum number of pilotjobs at all times (baseline)
#SchedMin = 1
#  Maximum number of pilotjobs running simultaneously
#SchedMax = 10

#  If after this many seconds there are (still) more LGI jobs than pilotjobs,
#   spawn new pilotjobs
#WaitNew = 60
#  Terminate pilotjob after seconds of idle time
#WaitTerm = 300
#  Maximum run-time of pilotjobs in seconds.
#   Leave empty to run indefinitely until batch system terminates it.
#   Note that the pilotjob only terminates when it has no more work to do,
#   a running application will not be killed.
#MaxRuntime = 

# Number of hours after termination to keep pilotjob info (including logs)
#KeepJobs = 168

# To enable statistics gathering, set the StatsInterval > 0
#  Statistics logging interval, or 0 for no statistics
#StatsInterval = 0
#  Seconds of statistics history to keep
#StatsHistory = 3600
#  CSV file to log statistics to, or empty for no statistics
#StatsFile = runhere/stats.csv

# PID file for communicating with the daemon
#PidFile = runhere/daemon.pid


#=======================================================================
#  global configuration parameters. this is a catch all section.
[Configuration]
#  extra components to load; don't remove GangaLGIPilot
RUNTIME_PATH=GangaLGIPilot

#  The type of the interactive shell: IPython (cooler) or Console (limited)
#TextShell = IPython

#  don't enable usage monitoring (enabling this can throw an exception since
#  the ApMon dependency is not shipped)
UsageMonitoringMSG = False
UsageMonitoringURL =



#=======================================================================
#  LCG/gLite/EGEE configuration parameters
[LCG]
#  sets allowed computing elements by a regular expression
#AllowedCEs =
#AllowedCEs = .*-express  # faster response for testing
#  sets the size limitation of the input sandbox, oversized input sandbox will
#  be pre-uploaded to the storage element specified by 'DefaultSE' in the area
#  specified by 'DefaultSRMToken'
#BoundSandboxLimit = 10485760
#  sets the generic LCG-UI configuration script for the GLITE workload
#  management system
#Config = 
#  sets the VO-specific LCG-UI configuration script for the EDG resource broker
#ConfigVO = 
#  sets the baseURI for getting the input sandboxes for the job
#CreamInputSandboxBaseURI = 
#  sets the baseURI for putting the output sandboxes for the job
#CreamOutputSandboxBaseURI = 
#  sets the DataAccessProtocol
#DataAccessProtocol = ['gsiftp']
#  sets the DataRequirements of the job
#DataRequirements = 
#  sets the file catalogue server
#DefaultLFC = prod-lfc-shared-central.cern.ch
#  sets the default storage element
#DefaultSE = srm.cern.ch
#  sets the space token for storing temporary files (e.g. oversized input
#  sandbox)
#DefaultSRMToken = 
#  enables/disables the support of the EDG middleware
#EDG_ENABLE = False
#  sets the LCG-UI environment setup script for the EDG middleware
#EDG_SETUP = /afs/cern.ch/sw/ganga/install/config/grid_env_auto.sh
#  sets excluded computing elements by a regular expression
#ExcludedCEs = 
#  Enables/disables the support of the GLITE middleware
#GLITE_ENABLE = True
#  sets the LCG-UI environment setup script for the GLITE middleware
#GLITE_SETUP = /afs/cern.ch/sw/ganga/install/config/grid_env_auto.sh
#  sets the maximum number of nodes (i.e. subjobs) in a gLite bulk job
#GliteBulkJobSize = 50
#  sets to True will load script-based glite-wms-* commands forcely with current
#  python, a trick for 32/64 bit compatibility issues.
#IgnoreGliteScriptHeader = False
#  sets the way the job's stdout/err are being handled.
#JobLogHandler = WMS
#  sets to True will do resource matching before submitting jobs, jobs without
#  any matched resources will fail the submission
#MatchBeforeSubmit = False
#  sets the myproxy server
#MyProxyServer = myproxy.cern.ch
#MyProxyServer = px.grid.sara.nl # for BiG Grid (NL)
#  sets the number of concurrent threads for downloading job's output sandbox
#  from gLite WMS
#OutputDownloaderThread = 10
#  sets the ranking rule for picking up computing element
#Rank = 
#  sets the replica catalogue server
#ReplicaCatalog = 
#  sets the full qualified class name for other specific LCG job requirements
#Requirements = Ganga.Lib.LCG.LCGRequirements
#  sets maximum number of job retry
#RetryCount = 3
#  sets the full qualified class name for handling the oversized input sandbox
#SandboxCache = Ganga.Lib.LCG.LCGSandboxCache
#  sets the transfer timeout of the oversized input sandbox
#SandboxTransferTimeout = 60
#  sets maximum number of job shallow retry
#ShallowRetryCount = 10
#  sets the gLite job status polling timeout in seconds
#StatusPollingTimeout = 300
#  sets the storage index
#StorageIndex = 
#  sets the number of concurrent threads for job submission to gLite WMS
#SubmissionThread = 10
#  sets the gLite job submission timeout in seconds
#SubmissionTimeout = 300
#  sets the name of the grid virtual organisation
#VirtualOrganisation = dteam


#=======================================================================
#  control the messages printed by Ganga The settings are applied hierarchically
#  to the loggers. Ganga is the name of the top-level logger which applies by
#  default to all Ganga.* packages unless overriden in sub-packages. You may
#  define new loggers in this section. The log level may be one of: CRITICAL
#  ERROR WARNING INFO DEBUG
[Logging]
#  top-level logger
#Ganga = WARNING
#  logger of Ganga.GPIDev.* packages
#Ganga.GPIDev = INFO
#  FIXME
#Ganga.Runtime.bootstrap = INFO
#  logger of the Ganga logging package itself (use with care!)
#Ganga.Utility.logging = WARNING
#  LGI
LGI = INFO
#  logger for stomp.py external package
#stomp.py = CRITICAL

#  enable ASCII colour formatting of messages e.g. errors in red
#_colour = True
#  format of logging messages: TERSE,NORMAL,VERBOSE,DEBUG
#_format = NORMAL
#  if True then the cache used for interactive sessions, False disables caching
#_interactive_cache = True
#  location of the logfile
#_logfile = lgipilot.log
#  the size of the logfile (in bytes), the rotating log will never exceed this
#  file size
#_logfile_size = 100000


#=======================================================================
#  background job status monitoring and output retrieval
[PollThread]

#  Poll rate for gLite backend.
#gLite = 30
#  Poll rate for LCG backend.
#LCG = 30
#  enable monitoring automatically at startup, in script mode monitoring is
#  disabled by default, in interactive mode it is enabled; required by lgipilot
autostart = True

#  internal supervising thread
#base_poll_rate = 2
#  The frequency in seconds for credentials checker
#creds_poll_rate = 30
#  Default rate for polling job status in the thread pool. This is the default
#  value for all backends.
#default_backend_poll_rate = 30
#  The frequency in seconds for free disk checker
#diskspace_poll_rate = 30
#  User will get the FIRST prompt after N seconds, as specified by this
#  parameter. This parameter also defines the time that Ganga will wait before
#  shutting down, if there are only non-critical threads alive, in both
#  interactive and batch mode.
#forced_shutdown_first_prompt_time = 5

#  Size of the thread pool. Each threads monitors a specific backaend at a given
#  time. Minimum value is one, preferably set to the number_of_backends + 1
#update_thread_pool_size = 5


#=======================================================================
#  default attribute values for GridProxy objects
[defaults_GridProxy]
#  Set of commands to be used for credential-related operations
#command = ICommandSet
#  Refresh time of proxy info cache
#info_refresh_time = 00:15
#  String of options to be passed to command for proxy creation
#init_opts = 
#  Number of password attempts allowed when creating credential
#maxTry = 1
#  Default minimum validity
#minValidity = 00:15
#  Default credential validity at creation
#validityAtCreation = 24:00
#  Virtual organisation managment system information
#voms = 


#=======================================================================
#  default attribute values for CREAM objects
[defaults_CREAM]
#  CREAM CE endpoint
#CE = 
#  Requirements for the resource selection
#requirements = None
#  Interface for handling oversized input sandbox
#sandboxcache = None


#=======================================================================
#  default attribute values for LCG objects
[defaults_LCG]
#  Request a specific Computing Element
#CE = 
#  Middleware type
#middleware = GLITE
#  Enable the job perusal feature of GLITE
#perusable = False
#  Requirements for the resource selection
#requirements = None
#  Interface for handling oversized input sandbox
#sandboxcache = None


#=======================================================================
#  default attribute values for LCGRequirements objects
[defaults_LCGRequirements]
#  Minimum available CPU time (min)
#cputime = 0
#  External connectivity
#ipconnectivity = False
#  Mininum available memory (MB)
#memory = 0
#  Other Requirements
#other = []
#  Software Installations
#software = []
#  Mimimum available total time (min)
#walltime = 0


#=======================================================================
#  default attribute values for Job objects
[defaults_Job]
#  specification of the resources to be used (e.g. batch system)
backend = LCG

